<?xml version="1.0" encoding="UTF-8" ?>   
    <!DOCTYPE mapper   
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不使用namespace的话sql搜索定位会比较方便-->
<mapper namespace="cn.kw.express.mapper.CompanyMapper">

     <!-- 实体类与数据库映射字段部分  start -->
	<resultMap id="ResultMapCompany" type="cn.kw.express.pojo.Company">
        <result property="id" column="id"  jdbcType="INTEGER"/>
        <result property="code" column="code"  jdbcType="VARCHAR"/>
        <result property="name" column="name"  jdbcType="VARCHAR"/>
        <result property="phone" column="phone"  jdbcType="VARCHAR"/>
        <result property="photo" column="photo"  jdbcType="VARCHAR"/>
        <result property="type" column="type"  jdbcType="VARCHAR"/>
        <result property="bz" column="bz"  jdbcType="VARCHAR"/>
		<result property="fy" column="fy"  jdbcType="INTEGER"/>
	</resultMap>
	 <!-- 实体类与数据库映射字段部分  end -->
	 
	 <!-- 声明数据库字段 -->
	<sql id="Company_field">
           id,
           code,
           name,
           phone,
           photo,
           type,
           bz,
           fy
	</sql>
	<sql id="Company_inserts">
		code,
		name,
		phone,
		photo,
		type,
		bz,
		fy
	</sql>
	<!-- 实体类属性  -->
	<sql id="Company_insert">
        	#{code} ,
        	#{name} ,
        	#{phone} ,
        	#{photo} ,
        	#{type} ,
        	#{bz},
        	#{fy}
	</sql>
	
	<!-- 执行修改时 数据库字段和表字段比较 -->
	<sql id="Company_update">
		    <if test="code != null and code != ''" >
	            code = #{code} ,
	        </if>
		    <if test="name != null and name != ''" >
	            name = #{name} ,
	        </if>
		    <if test="phone != null and phone != ''" >
	            phone = #{phone} ,
	        </if>
		    <if test="photo != null" >
	            photo = #{photo} ,
	        </if>
		    <if test="type != null" >
	            type = #{type} ,
	        </if>
		<if test="bz != null" >
			bz = #{bz},
		</if>
		<if test="fy != null" >
			fy = #{fy}
		</if>
	</sql>
	
	<!-- 查询时条件 -->
	<sql id="Company_where">
		<if test="code != null and code != ''" >
			and code = #{code}
		</if>
		<if test="name != null and name != ''" >
			and name like CONCAT('%', #{name}, '%')
		</if>
		<if test="phone != null and phone != ''" >
			and phone = #{phone}
		</if>
		<if test="photo != null" >
			and photo = #{photo}
		</if>
		<if test="type != null" >
			and type = #{type}
		</if>
		<if test="bz != null" >
			and bz = #{bz}
		</if>
		<if test="fy != null" >
			AND  fy = #{fy}
		</if>
	</sql>
	
   <!-- **************************************分割线************************************************************ -->	
	
	<!-- 以下是sql执行语句 
	     注意：1)需要传参数的请注意你使用的方法是 xxByMap还是ByEntuty 存放的参数类型不一致。
	      2)非自定义的方法已经是basedao注明的。方法名一定要和id相同
	      3)自定义类的方法注意是否和共有方法重名id
	      4)执行sql出现顺序和baseDao方法一致，便于查询请勿随意添加，自定义的sql一律放在自定义sql区域
	 -->
	
	
   <!-- ========================================新增==================================================================== -->
	<!-- 
	 【注意添加序列】
	 1.方法描述：新增数据
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="insert" parameterType="cn.kw.express.pojo.Company" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO company (
        <include refid="Company_inserts" />
        ) VALUES (
        <include refid="Company_insert" />       
        )
	</insert>
	
	
	 <!-- ========================================删除==================================================================== -->
	<!-- 
	 1.方法描述：根据主键id删除
	 2.参数：主键id
	-->
	<delete id="deleteById" parameterType="java.lang.Integer">
	 delete from company where id=#{id}
	</delete>
	
	
	<!-- 
	 1.方法描述：根据实体类删除
	 2.参数：主键id
	-->
	<delete id="deleteByEntity" parameterType="cn.kw.express.pojo.Company">
	 delete from company
	  WHERE 1=1
      <include refid="Company_where" />   
	</delete>
	
	
	<!-- 
	 1.方法描述：根据map删除
	 2.参数：主键id
	-->
	<delete id="deleteByMap" parameterType="java.util.HashMap">
	 delete from company
	  WHERE 1=1
      <include refid="Company_where" />   
	</delete>
	
	
	 <!-- ========================================修改==================================================================== -->
	<!-- 
	 1.方法描述：修改数据
	 2.参数：实体类
	-->
	<update id="update" parameterType="cn.kw.express.pojo.Company">
        UPDATE company
        <set>
	        <include refid="Company_update" />
	    </set>
        WHERE 1=1
        	<include refid="Company_where" />        
	</update>
	
	<!-- 
	 1.方法描述：修改数据通过id
	 2.参数：实体类
	 -->
	<update id="updateById" parameterType="cn.kw.express.pojo.Company">
        UPDATE company
        <set>
	        <include refid="Company_update" />
	    </set>
        WHERE 1=1
        	and id=#{id}      
	</update>
	
	
	
	 <!-- ========================================查询列表【不分页】==================================================================== -->
	
	<!-- 
	 1.方法描述：用于listByMap根据map查询
	 2.参数：map
	-->
	<select id="listByMap" resultMap="ResultMapCompany" parameterType="map">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：用于select查询所有
	 2.参数：无参数
	-->
	<select id="listAll" resultMap="ResultMapCompany">
		select <include refid="Company_field" />
 		from company 
	</select>
	
	
	<!-- 
	 1.方法描述：查询所有实体,根据实体属性值为判断条件查询所有实体，
	 2.参数：Entity
	-->
	<select id="listAllByEntity" resultMap="ResultMapCompany" parameterType="cn.kw.express.pojo.Company">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
	
	
	 <!-- ========================================查询单个对象==================================================================== -->
	<!-- 
	 1.方法描述：select查询单个
	 2.参数：id
	-->
	<select id="load" resultMap="ResultMapCompany" parameterType="java.lang.Integer">
		select 	<include refid="Company_field" />
 		from company 
 		where id=#{id}
	</select>
	
	
	
	<!-- 
	 1.方法描述：select查询单个
	 2.参数：id
	-->
	<select id="getById" resultMap="ResultMapCompany" parameterType="java.lang.Integer">
		select 	<include refid="Company_field" />
 		from company 
 		where id=#{id}
	</select>
	
	<!-- 
	 1.方法描述：用于getByMap根据map查询
	 2.参数：map
	-->
	<select id="getByMap" resultMap="ResultMapCompany" parameterType="map">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：用于Entity根据Entity查询
	 2.参数：Entity
	 -->
	<select id="getByEntity" resultMap="ResultMapCompany" parameterType="cn.kw.express.pojo.Company">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
	
	 <!-- ========================================查询列表【分页】==================================================================== -->
     <!-- 
	 1.方法描述：分页
	 2.参数：map
	 -->
	<select id="findByMap" resultMap="ResultMapCompany" parameterType="map">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
     <!-- 
	 1.方法描述：分页
	 2.参数：Entity
	 -->
	<select id="findByEntity" resultMap="ResultMapCompany" parameterType="cn.kw.express.pojo.Company">
		select <include refid="Company_field" />
 		from company where 1=1
 		<include refid="Company_where" /> 
	</select>
	
	
	 <!-- ========================================批量新增修改==================================================================== -->
	<!-- 
	 1.方法描述：批量插入
	 2.参数：集合/数组
	-->
	<insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO company (
        <include refid="Company_field" />
        ) VALUES 
        <foreach collection="list" item="item" index="index"
			separator=",">
			(
			
	            #{item.code} ,
	            #{item.name} ,
	            #{item.phone} ,
	            #{item.photo} ,
	            #{item.type} 
			
			)
		</foreach>       
        
	</insert>
    
    <!-- 
	 1.方法描述：批量修改
	 2.参数：集合/数组
	-->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index"
			separator=";">
        UPDATE 
        company 
        <set>
		    <if test="item.code != null" >
	        code = #{item.code},
	        </if>
		    <if test="item.name != null" >
	        name = #{item.name},
	        </if>
		    <if test="item.phone != null" >
	        phone = #{item.phone},
	        </if>
		    <if test="item.photo != null" >
	        photo = #{item.photo},
	        </if>
		    <if test="item.type != null" >
	        type = #{item.type}
	        </if>
	    </set>
        WHERE 
        	1=1 
        </foreach>    
	</update>

   <!-- ******************************自定义 sql************************************************************** -->
   
   <!-- 
           通过sql查询单个对象 返回对象
    -->
   <select id="getBySqlReturnEntity" resultMap="ResultMapCompany">
		${sql}
   </select>
   
    <!-- 
           通过sql查询单个对象 返回map
    -->
   <select id="getBySqlReturnMap" resultType="map">
		${sql}
   </select>
   
   <!-- 
           通过sql查询集合 返回对象
    -->
   <select id="listBySqReturnEntity" resultMap="ResultMapCompany">
		${sql}
   </select>
   
    <!-- 
           通过sql查询查询集合 返回map
    -->
   <select id="listBySqReturnMap" resultType="map">
		${sql}
   </select>
   
   <!-- 
           通过sql查询分页集合 返回对象
    -->
   <select id="findBySqlRerturnEntity" resultMap="ResultMapCompany">
		${sql}
   </select>
   
   <!-- 通过sql修改 -->
   <update id="updateBysql">
       ${sql}  
   </update>
   
   <delete id="deleteBySql">
	${sql}  
	</delete>
	
</mapper>

